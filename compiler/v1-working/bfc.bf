Brainfuck compiler (for FreeBSD/x86)

Maks Verver (maksverver@geocities com) February 2007

Accepts a Brainfuck program on standard input and writes and ELF binary to
standard output
_______________________________________________________________________________

This program assumes the following environment: registers store unsigned 8bit
integers and wrap around (so 0 minus 1 is 255)  The register tape is unbounded
on both sides (not just to the right)  When EOF or a read error occurs the
current register is set to 0; note that this is indistinquishable from reading
a zero

This is also the environment that is provided by the compiler altough memory is
limited to 1MB (so 500KB on both sides since the pointer starts in the middle)

FIXME: support for more than 65535 bytes in output file
FIXME: remove dependency on run time code modification by building a true
       two pass compiler (outch!)
(FIXME: change read implementation to leave register unmodified in case of
       error/eof?)
(FIXME: coalesce consecutive identical instructions to reduce code size; in
        principle all instruction can be coalesced)
_______________________________________________________________________________

PHASE 1: Read Brainfuck source code into memory

The Brainfuck operations are translated to values from 1 to 8 and nonBrainfuck
characters are discarded; all values are stored twice in succession two allow
for destructive processing later on

,
[
    "move right" (ascii 62)
    <+> ++>++++++++[-<-------->]<
    [
        "move left" (ascii 60)
        <+> ++
        [
            "increment" (ascii 43)
            <+> +++++++++++++++++
            [
                "decrement" (ascii 45)
                <+> --
                [
                    "read byte" (ascii 44)
                    <+> +
                    [
                        "write byte" (ascii 46)
                        <+> --
                        [
                            "begin loop" (ascii 91)
                            <+> >+++++[-<--------->]<
                            [
                                "end loop" (ascii 93)
                                <+> --
                                [
                                    some other character; should be ignored
                                    [-]<[-]>
                                ]
                            ]
                        ]
                    ]
                ]
            ]
        ]
    ]

    duplicate code if its nonzero
    <[[->+>+<<]>>[-<<+>>]]>

    read next character
    ,
]
Position is now two spaces to the right of the last opcode


PHASE 2: Determine length of generated binary

Length is stored after the instructions (seperated by a zero) as two bytes in
little endian order and initialized with length of the binary template
---------------- 240 bytes

Layout is now as follows:
    op1 op1 op2 op2 op3 op3 0 ^lo hi

Count the length produced by the Brainfuck code

<<<[<<]>>   move to front
[
    >
    reconstruct byte count for this opcode two places to the left
    [- <<+>>                                         1 byte
        [-                                           1 byte
            [- <<+>>                                 2 bytes
                [-                                   2 bytes
                    [- <<+>>                         3 bytes
                        [-                           3 bytes
                            [- <<+++++>>             8 bytes
                                [- <<++++++>>       14 bytes
    ]   ]   ]   ]   ]   ]   ]   ]
    >
]

Layout is now as follows:
    bc1 op1 bc2 op2 bc3 op3 0 ^0 lo hi
bc denotes a byte count; op denotes an opcode; lo/hi stores total code length

Now to add up all the byte counts to the total; from left to right
(This is actually the slowest part of the program: O(N^2))
<<<
[
    subtract from the leftmost byte count
    [<<]>> -

    move pointer to lo
    >>[>>]>>

    increment with carry
    +[->>+>+<<<]>>[-<<+>>]+>[<->[-]]<[<+>-]<<

    <<<<
]
>>>

Layout is now as follows: 0 op1 0 op2 0 op3 0 ^0 lo hi


PHASE 3: Write ELF headers
<+++++++++[->++++++++++++++<]>+. <+++++++[->--------<]>--.   7f 45
+++++++. ------. [-]+. . . ++++++++. [-]. . . . . . . .      4c 46 01 01 01 09 00 00 00 00 00 00 00 00
++. --. +++. [-]. +. -. . . <++++++++[->-----------<]>-.     02 00 03 00 01 00 00 00 a7
<+++++[->--------<]>+. [-]++++. ++++.                        80 04 08
<++++[->+++++++++++<]>. [-]. . . . . . . . . . .             34 00 00 00 00 00 00 00 00 00 00 00
<++++[->+++++++++++++<]>. [-]. <++++[->++++++++<]>. [-].     34 00 20 00
+. -. . . . . . . +. -. . . . . . . .                        01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00
<++++++++[->++++++++++++++++<]>. [-]++++. ++++. [-].         80 04 08 00
<++++++++[->++++++++++++++++<]>. [-]++++. ++++. [-]          80 04 08
>.>.>.>.<<<<                                                 Insert code size (size of file)
>.>.>.>.<<<<                                                 Insert code size (size in memory)
+++++++. [-]. . . . +. -. .                                  07 00 00 00 00 01 00 00


PHASE 4: Write initialization code
<+++++++++[->-------------<]>. [+]<++++[->+++++++<]>.        8b 1c
++++++++. <++++++++++[->++++++++++<]>+.                      24 89
<+++++++[->++++++++++++<]>++.                                df
<+++++++[->-------------<]>-.                                83
<+++++++++[->++++++++++++<]>. [+]++++++.                     ef 06
<+++++++[->-----------<]>. [+]+. -. . .                      b9 01 00 00 00
<+++++[->+++++++++++++++<]>. --------.                       4b 43
<++++++[->++++++++++<]>+. <+++++++[->----------<]>+.         80 3b
<+++++++[->++++++++++++<]>+. <+++[->---------<]>.            90 75
<+++++++++++[->++++++++++++<]>+.                             fa
<++++++++[->+++++++++<]>+. --. <+++++++[->+++++++++<]>.      43 41 80
<+++++++[->----------<]>+. <+++++++[->++++++++++++<]>+.      3b 90
<+++[->---------<]>. <+++++++++[->++++++++++++++<]>.         75 f3
<++++++++[->--------------<]>.                               83
<++++++++++[->++++++++++<]>++. [+]++.                        e9 02
<+++++++++[->+++++++++++++<]>--.                             75
<+++++++++++[->+++++++++++<]>.                               ee
<+++++++[->++++++++++++<]>+. <+++++++[->++++++++++<]>.       43 89
[+]<+++++[->++++++<]>+. <++++[->+++++++++++++<]>.            1f 53
<++++++++[->++++++++++++++<]>.                               c3
<++++++++[->-----------<]>-. [-]+.                           6a 01
<++++++++[->++++++++++<]>-. <+++++[->+++++<]>+. [-]+.        50 6a 01
<++++++[->++++++++<]>. <++++++++[->--------------<]>-.       31 c0
[+]<++++++++[->++++++++++<]>. <++++++++[->++++++++++++<]>.   50 b0
[+]++++. <+++++[->-----------<]>.                            04 cd
<+++++++[->-----------<]>. +++++++++++.                      80 8b
<+++++++[->----------<]>-. <++++[->--------<]>.              44 24
[-]++++++++. <+++++++++++[->+++++++++++<]>++.                08 83
<++++++++[->++++++++<]>+. [+]<++++[->++++<]>.                c4 10
<+++++++[->-----------<]>. <+++++++[->--------<]>--.         c3 89
<+++++++[->++++++++<]>++. <++++++++[->-----------<]>-.       c3 6a
[-]+. <++++++++[->++++++++++<]>-. <+++++[->+++++<]>+. [-].   01 50 6a 00
<+++++++[->+++++++<]>. <++++++++[->--------------<]>-.       31 c0
[+]<++++++++[->++++++++++<]>. <++++++++[->++++++++++++<]>.   50 b0
[+]+++. <++++++[->---------<]>. <+++++++[->-----------<]>.   03 cd 80
<+++++++[->--------<]>. <++++[->+++++++++++<]>. [-]+++.      48 74 03
<++++++[->----------<]>-. [+]+++. [-].                       c6 03 00
<++++++++++[->+++++++++++++<]>+. <++++++++[->++++++++<]>+.   83 c4
[+]<++++[->++++<]>. <+++++++++++[->+++++++++++<]>.           10 89
<++++++++[->++++++++++<]>-. <+++[->-------<]>.               d8 c3
<+++++++[->--------<]>--. <+++++++[->+++++++++++++<]>+.      89 e5
[+]<++++++++[->+++++++++++++<]>. <++++[->++++<]>+.           68 79
+++++++. [-]++++. ++++. <++++++++[->++++++++++++<]>.         80 04 08 68
<++++++[->++++++<]>+. -------------. [-]++++. ++++.          8d 80 04 08
<+++++++[->-----------<]>. [+]. . <++++[->++++<]>. [-].      bb 00 00 10 00
<+++++++[->+++++++<]>. <++++++++[->--------------<]>-.       31 c0
[+]<++++++++[->++++++++++<]>. . <+++++[->+++++<]>+.          50 50 6a
<+++++++++[->------------<]>+.                               ff
<+++++++[->+++++++++++++++<]>. [-]. <++++[->++++<]>. [-].    68 00 10 00
. <+++++++[->+++++++++++++++<]>+. [-]+++.                    00 6a 03
<++++++++[->++++++++++<]>. ---.                              53 50
<++++++++[->++++++++++++<]>. <+++[->+++++++<]>.              b0 c5
[+]<++++++++[->++++++++++<]>.                                50
<+++++++++[->++++++++++++++<]>-.                             cd
<+++++++[->-----------<]>. +++. <++++++++[->++++++++<]>+.    80 83 c4
[+]<++++[->++++++++<]>. <+++++++++[->+++++++++++<]>.         20 83
<+++++++++[->+++++++++++++<]>. +++++++.                      f8 ff
<+++++++++[->+++++++++++++<]>+. [-]+++++++.                  75 07
<++++++[->+++++++<]>. <++++++++[->--------------<]>-.        31 c0
[+]<++++++++[->++++++++<]>. <++++[->++++<]>. .               40 50 50
<+++++++++[->++++++++++++++<]>-.                             cd
<+++++++[->-----------<]>. +++++++++.                        80 89
<+++++++[->+++++++++<]>-. <+++++++[->---------<]>+.          c7 89
<++++++++[->++++++++++<]>. [+]<++++++[->++++++++<]>.         d9 30
<++++++++[->--------------<]>. <+++++[->++++++++++<]>+.      c0 f3
<++++++++[->---------<]>-. <++++[->--------<]>-.             aa 89
<++++++++++[->+++++++++++<]>+. <+++++[->--------<]>+.        f8 d1
<+++++[->+++++<]>+. [+]<+++++[->++++++++<]>+.                eb 29
<+++++++++[->---------<]>. [+]                               d8


PHASE 5: Emit machine code for the Brainfuck opcodes

<<[<<]>>    start at the leftmost opcode
[
    -[-<+<+>>]<<[->>+<<]+>[<->[-]]<[-   decrement and test for zero
        "move right"
        <++++++++[->++++++++<]>.        0x40
        [-]
    ]>>

    -[-<+<+>>]<<[->>+<<]+>[<->[-]]<[-
        "move left"
        <++++++++[->+++++++++<]>.       0x48
        [-]
    ]>>

    -[-<+<+>>]<<[->>+<<]+>[<->[-]]<[-
        "increment"
        --. ++.                         0xfe 0x00
    ]>>

    -[-<+<+>>]<<[->>+<<]+>[<->[-]]<[-
        "decrement"
        --. ++++++++++.                 0xfe 0x08
        [-]
    ]>>

    -[-<+<+>>]<<[->>+<<]+>[<->[-]]<[-
        "read byte"
        -.                                  0xff
        <+++++++++++++++++[->----------<]>. 0x55
        [-]--------.                        0xf8
        [+]
    ]>>

    -[-<+<+>>]<<[->>+<<]+>[<->[-]]<[-
        "write byte"
        -.                                  0xff
        <+++++++++++++++++[->----------<]>. 0x55
        [-]----.                            0xfc
        [+]
    ]>>

    -[-<+<+>>]<<[->>+<<]+>[<->[-]]<[-
        "begin loop"
        <++++++++++++[->++++++++++++<]>.    0x90
        <++++++[->+++++++<]>+.              0xbb
        <+++++++[->---------------<]>++.    0x54
        <++++[->+++++++++++<]>.             0x80
        [-]++++.                            0x04
        ++++.                               0x08
        [-]-.                               0xff
        <++++[->-----------<]>.             0xd3
        [+]
    ]>>

    -[-<+<+>>]<<[->>+<<]+>[<->[-]]<[-
        "end loop"
        <++++++++++++[->++++++++++++<]>..   0x90 0x90
        ------.                             0x8a
        [+]<++++[->++++++<]>.               0x18
        <+++++++++[->++++++++++++<]>.       0x84
        <++++++++[->+++++++++++<]>-.        0xdb
        <++++++[->-----------------<]>-.    0x74
        [-]+++.                             0x03
        ----.                               0xff
        <++++++[->++++++<]>+..              0x24 0x24
        <++++++++[->++++++++++++<]>-.       0x83
        <++++++++[->++++++++<]>+.           0xc4
        [+]++++.                            0x04
        ----
    ]>>

    [-]>>
]

PHASE 6: Write the finalization code ('epilogue')
<+++++++[->+++++++<]>. <++++++++[->--------------<]>-.       31 c0
[+]<++++++++[->++++++++++<]>. <++++[->----<]>.               50 40
<++++[->++++<]>. <+++++++++[->++++++++++++++<]>-.            50 cd
<+++++++[->-----------<]>. [-]                               80

That's it! Pipe the output to an executable file and run
